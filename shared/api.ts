/**
 * Generated by orval v6.26.0 üç∫
 * Do not edit manually.
 * Tour Management Service
 * Additional service for RUSSPASS
 * OpenAPI spec version: 1.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export type GetApiV1ToursRecommendationsParams = {
/**
 * From location name
 */
fromName?: string;
/**
 * To location name
 */
toName?: string;
/**
 * Date of the tour
 */
whenDate?: string;
/**
 * Number of nights in the tour
 */
nightsCnt?: number;
/**
 * Number of adults
 */
adults?: number;
/**
 * Number of children
 */
childrens?: number;
/**
 * Type of the tour
 */
tourType?: string;
/**
 * Minimum price
 */
priceFrom?: string;
/**
 * Maximum price
 */
priceTo?: string;
/**
 * Minimum rating
 */
rating?: number;
/**
 * Guaranteed availability
 */
guaranteed?: boolean;
/**
 * Flight is included
 */
withFlight?: boolean;
/**
 * Accomodation is included
 */
withAcc?: boolean;
/**
 * Nutrition is included
 */
withFood?: boolean;
/**
 * The tour takes place on a weekend
 */
dayOff?: boolean;
/**
 * Low cost tour
 */
lowCost?: boolean;
/**
 * Age group ID
 */
ageGroupId?: number;
/**
 * Tour difficulty level
 */
difficulty?: number;
/**
 * Comfort level
 */
comfort?: number;
/**
 * Food ID
 */
foodId?: number;
};

export type GetApiV1ToursHotParams = {
/**
 * From location name
 */
fromName?: string;
/**
 * To location name
 */
toName?: string;
/**
 * Date of the tour
 */
whenDate?: string;
/**
 * Number of nights in the tour
 */
nightsCnt?: number;
/**
 * Number of adults
 */
adults?: number;
/**
 * Number of children
 */
childrens?: number;
/**
 * Type of the tour
 */
tourType?: string;
/**
 * Minimum price
 */
priceFrom?: string;
/**
 * Maximum price
 */
priceTo?: string;
/**
 * Minimum rating
 */
rating?: number;
/**
 * Guaranteed availability
 */
guaranteed?: boolean;
/**
 * Flight is included
 */
withFlight?: boolean;
/**
 * Accomodation is included
 */
withAcc?: boolean;
/**
 * Nutrition is included
 */
withFood?: boolean;
/**
 * The tour takes place on a weekend
 */
dayOff?: boolean;
/**
 * Low cost tour
 */
lowCost?: boolean;
/**
 * Age group ID
 */
ageGroupId?: number;
/**
 * Tour difficulty level
 */
difficulty?: number;
/**
 * Comfort level
 */
comfort?: number;
/**
 * Food ID
 */
foodId?: number;
};

export type GetApiV1ToursParams = {
/**
 * From location name
 */
from_name?: string;
/**
 * To location name
 */
to_name?: string;
/**
 * Date of the tour
 */
when?: string;
/**
 * Number of nights in the tour
 */
nights_count?: number;
/**
 * Number of adults
 */
adults?: number;
/**
 * Number of children
 */
childrens?: number;
/**
 * Tags of the tour, multiple values separated by commas
 */
tags?: unknown[];
/**
 * Minimum price
 */
price_from?: string;
/**
 * Maximum price
 */
price_to?: string;
/**
 * Minimum rating
 */
rating?: number;
/**
 * Guaranteed availability
 */
guaranteed?: boolean;
/**
 * Flight is included
 */
with_flight?: boolean;
/**
 * Accomodation is included
 */
with_acc?: boolean;
/**
 * Nutrition is included
 */
with_food?: boolean;
/**
 * The tour takes place on a weekend
 */
day_off?: boolean;
/**
 * Low cost tour
 */
low_cost?: boolean;
/**
 * Age group ID
 */
age_group?: number;
/**
 * Tour difficulty level
 */
difficulty?: number;
/**
 * Comfort level
 */
comfort?: number;
/**
 * Food ID
 */
food_id?: number;
};

export type GetApiV1CitiesPrefixParams = {
/**
 * Output limit
 */
limit?: number;
};

export interface GithubComKldd0TravelHack2024InternalEntityTourDate {
  end?: string;
  start?: string;
}

export interface GithubComKldd0TravelHack2024InternalEntityMediaType {
  src?: string;
  type?: string;
}

export interface GithubComKldd0TravelHack2024InternalEntitySimplifiedTourView {
  category?: string;
  id?: number;
  is_liked?: boolean;
  location?: string;
  media?: GithubComKldd0TravelHack2024InternalEntityMediaType[];
  nights_count?: number;
  rating?: number;
  tags?: string[];
  title?: string;
}

export interface GithubComKldd0TravelHack2024InternalEntityMediaSectors {
  acc?: GithubComKldd0TravelHack2024InternalEntityMediaType[];
  head?: GithubComKldd0TravelHack2024InternalEntityMediaType[];
  program?: GithubComKldd0TravelHack2024InternalEntityMediaType[];
}

export interface GithubComKldd0TravelHack2024InternalEntityDTOReview {
  frequency?: string;
  liked?: string[];
  local_resident?: boolean;
  negative_comment?: string;
  positive_comment?: string;
  type?: string;
  username?: string;
  video?: GithubComKldd0TravelHack2024InternalEntityMediaType;
}

export interface GithubComKldd0TravelHack2024InternalEntityDTOTour {
  category?: string;
  comfort_level?: string;
  description?: string;
  difficulty_level?: string;
  faq?: string;
  id?: number;
  important_info?: string;
  included?: string[];
  is_liked?: boolean;
  location?: string;
  map?: string;
  media?: GithubComKldd0TravelHack2024InternalEntityMediaSectors;
  nights_count?: number;
  not_included?: string[];
  program?: string[];
  rating?: number;
  reviews?: GithubComKldd0TravelHack2024InternalEntityDTOReview[];
  tags?: string[];
  title?: string;
  tour_dates?: GithubComKldd0TravelHack2024InternalEntityTourDate[];
}

export interface GithubComKldd0TravelHack2024InternalEntityCity {
  id?: number;
  name?: string;
}

export interface EchoHTTPError {
  message?: unknown;
}





  /**
 * Get city by prefix
 * @summary Get city by prefix
 */
export const getApiV1CitiesPrefix = <TData = AxiosResponse<GithubComKldd0TravelHack2024InternalEntityCity[]>>(
    prefix: string,
    params?: GetApiV1CitiesPrefixParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/v1/cities/${prefix}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Get tours according to search and filter params
 * @summary Get tours according to search and filter params
 */
export const getApiV1Tours = <TData = AxiosResponse<GithubComKldd0TravelHack2024InternalEntitySimplifiedTourView[]>>(
    params?: GetApiV1ToursParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/v1/tours`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Get hot tours according to search and filter params
 * @summary Get hot tours according to search and filter params
 */
export const getApiV1ToursHot = <TData = AxiosResponse<GithubComKldd0TravelHack2024InternalEntitySimplifiedTourView[]>>(
    params?: GetApiV1ToursHotParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/v1/tours/hot`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Get recommended tours according to search and filter params
 * @summary Get reccomended tours according to search and filter params
 */
export const getApiV1ToursRecommendations = <TData = AxiosResponse<GithubComKldd0TravelHack2024InternalEntitySimplifiedTourView[]>>(
    params?: GetApiV1ToursRecommendationsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/v1/tours/recommendations`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Get tour by id
 * @summary Get tour by id
 */
export const getApiV1ToursId = <TData = AxiosResponse<GithubComKldd0TravelHack2024InternalEntityDTOTour>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/v1/tours/${id}`,options
    );
  }

export type GetApiV1CitiesPrefixResult = AxiosResponse<GithubComKldd0TravelHack2024InternalEntityCity[]>
export type GetApiV1ToursResult = AxiosResponse<GithubComKldd0TravelHack2024InternalEntitySimplifiedTourView[]>
export type GetApiV1ToursHotResult = AxiosResponse<GithubComKldd0TravelHack2024InternalEntitySimplifiedTourView[]>
export type GetApiV1ToursRecommendationsResult = AxiosResponse<GithubComKldd0TravelHack2024InternalEntitySimplifiedTourView[]>
export type GetApiV1ToursIdResult = AxiosResponse<GithubComKldd0TravelHack2024InternalEntityDTOTour>
